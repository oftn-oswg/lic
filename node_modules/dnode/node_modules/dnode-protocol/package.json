{
  "name": "dnode-protocol",
  "description": "implements the dnode protocol abstractly",
  "version": "0.2.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/substack/dnode-protocol.git"
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "main": "./index.js",
  "dependencies": {
    "traverse": "~0.6.3",
    "jsonify": "~0.0.0"
  },
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "readme": "dnode-protocol\n==============\n\nThis module implements the dnode protocol in a reusable form that is presently\nused for both the server-side and browser-side dnode code.\n\n[Read about the protocol itself here.](https://github.com/substack/dnode-protocol/blob/master/doc/protocol.markdown)\n\n[![build status](https://secure.travis-ci.org/substack/dnode-protocol.png)](http://travis-ci.org/substack/dnode-protocol)\n\nexample\n=======\n\n``` js\nvar proto = require('dnode-protocol');\n\nvar s = proto({\n    x : function (f, g) {\n        setTimeout(function () { f(5) }, 200);\n        setTimeout(function () { g(6) }, 400);\n    },\n    y : 555\n});\nvar c = proto();\n\ns.on('request', c.handle.bind(c));\nc.on('request', s.handle.bind(s));\n\nc.on('remote', function (remote) {\n    function f (x) { console.log('f(' + x + ')') }\n    function g (x) { console.log('g(' + x + ')') }\n    remote.x(f, g);\n});\n\ns.start();\nc.start();\n```\n\n***\n\n```\nf(5)\ng(6)\n```\n\nmethods\n=======\n\n``` js\nvar protocol = require('dnode-protocol')\n```\n\nvar proto = protocol(cons, opts={})\n-----------------------------------\n\nCreate a new protocol object with a constructor `cons` and an optional callback\nwrapper `wrap`.\n\n`cons` should be a function, in which case it will be used to create an instance\nby `new cons(remote, proto)` where `remote` is an empty reference to the remote\nobject before being populated and `proto` is the protocol instance.\n\nIf you return an object in `cons` the return value will be used\n(`new` does that part).\n\nIf you pass in a non-function as `cons`, its value will be used as the instance\ndirectly.\n\nYou can optionally specify `opts.wrap` and `opts.unwrap` to wrap and unwrap\nremote values for implementing weakmaps or marking callbacks.\n\nThe return value of `opts.wrap(cb, id)` will be stored in `proto.callbacks.remote[id]`\nand `opts.unwrap(ref, id)` will be called with the `ref` obtained from `wrap()`\npreviously to turn `ref` back into a `cb`.\n\nproto.handle(req)\n-----------------\n\nHandle a request object emitted by the request event, calling the method the\nrequest mentions with the provided arguments.\n\nproto.request(method, args)\n---------------------------\n\nEmit a request event for the method id `method` and the raw arguments `args`.\nThe args will be scrubbed for callbacks and emitted in normal form suitable for\npassing to `JSON.stringify()`.\n\nproto.start()\n-------------\n\nBegin the methods exchange. All listeners should be bound before this function\nis called.\n\nproto.cull(id)\n--------------\n\nInstruct the opposing connection to drop all references to the callback\nspecified by `id`.\n\nevents\n======\n\nproto.on('request', function (req) { ... })\n-------------------------------------------\n\nEmitted when a request is ready to be sent.\n\nThe request should be serialized and passed to the opposing connection's\n`.handle()`.\n\nproto.on('remote', function (remote) { ... })\n---------------------------------------------\n\nEmitted when the remote reference has been populated.\n\nproto.on('fail', function (err) { ... })\n----------------------------------------\n\nEmitted when there is a non-fatal failed request.\n\nproto.on('error', function (err) { ... })\n-----------------------------------------\n\nEmitted when there is a fatal exception one of the local callbacks.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install dnode-protocol\n```\n\nlicense\n=======\n\nMIT\n",
  "readmeFilename": "README.markdown",
  "_id": "dnode-protocol@0.2.2",
  "_from": "dnode-protocol@~0.2.2"
}
